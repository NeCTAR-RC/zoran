#!/usr/bin/env python

from __future__ import print_function

import sys

from lxml import etree
import xmltodict

from zoran.nova import list_servers, connect
from zoran.metasploit import wash_host
from zoran.config import CONF, cfg

from zoran.vulnerable_hosts import VulnerableHost, Vulnerability, Credential
from zoran.vulnerable_hosts_report import report_scan
from zoran.history_database import HistoryDatabase

core_opts = [
    cfg.BoolOpt('disable-host-validation',
                help="""Don't validate hosts"""),
    cfg.BoolOpt('dump',
                help="""At the end of the report print all the
                        vulnerabilities and credentials in one huge
                        table"""),
    cfg.BoolOpt('ignore-history',
                help="""Just report on all the security holes found in
                        the input file and ignore any historical
                        data."""),
    cfg.StrOpt('input-file',
               help="""Result XML to process. Unless doing a point-in-time
                       report, this option will always be needed."""),
    cfg.StrOpt('ip',
               help="""IP regex of servers"""),
    cfg.BoolOpt('list-boring',
                help="""List all vulnerabilities, even ones that would
                        normally be white listed"""),
    cfg.StrOpt('point-in-time',
               help="""Query the history database at a particular point
                       in time (specified as YYYY-MM-DD) by looking in
                       the database as opposed to the usual XML input
                       file."""),
    cfg.BoolOpt('report-empty',
                help="""Provide a report, even if there isn't any
                        vulnerability to report"""),
    cfg.StrOpt('report-format',
               help="""The format the report will be in: html, text
                       or mixed (the default). If the report is mixed
                       it will be emailed, if it is in html or text it
                       will just be printed to the screen.""",
               default="mixed"),
]

CONF.register_cli_opts(core_opts)


def host_service(host, service_id):
    service_id = host['uuid'] + '.' + service_id
    for service in host['services']:
        if service.get('id') == service_id:
            return service


def run(input_file, live_hosts):

    invalid_host_count = 0
    vulnerable_hosts = []

    if CONF.point_in_time:
        history = HistoryDatabase()
        # history.open_database(CONF.database)
        history.open_database("/home/zoran/archive/history.csv")
        holes = history.holes_at_point_in_time(CONF.point_in_time)
        for hole in holes:
            host_uuid = holes[2]
            host_address = holes[3]
            for host in vulnerable_hosts:
                if host.uuid == host_uuid and\
                   host.address == host_address:
                    vulnerable_host = host
                    break
            if not vulnerable_host:
                vulnerable_host = VulnerableHost(host_uuid, host_address)
                vulnerable_hosts.append(vulnerable_host)
            if hole[4] == "V":
                vulnerable_host.add_vulnerability(Vulnerability(hole[7],
                                                                hole[5],
                                                                hole[6]))
            elif hole[4] == "C":
                vulnerable_host.add_credential(Credential(hole[5],
                                                          hole[6],
                                                          hole[8],
                                                          hole[9]))
    else:
        tree = etree.parse(input_file)

        # Filter report down to hosts only
        hosts = tree.find('hosts')

        # Convert nova hosts to dict
        live_hosts = dict((h.id, h) for h in live_hosts)

        # Extract the scan id
        scan_details = tree.find('generated').attrib
        scan_id = scan_details['project']

        for host in hosts:
            host = xmltodict.parse(etree.tostring(host))
            host = wash_host(host['host'])
            host['scan-id'] = scan_id
            if host['uuid'] not in live_hosts and\
               not CONF.disable_host_validation:
                invalid_host_count += 1
                continue

            vulnerable_host = VulnerableHost(host['uuid'], host['address'])
            vulnerable_hosts.append(vulnerable_host)

            for vulns in host['vulns']:
                if 'service-id' in vulns:
                    service = host_service(host, vulns['service-id'])
                    service_name = service['name']
                    service_port = service['port']
                else:
                    service_name = "None"
                    service_port = "None"
                vulnerable_host.add_vulnerability(Vulnerability(vulns['name'],
                                                                service_name,
                                                                service_port))

            for cred in host['creds']:
                vulnerable_host.add_credential(Credential(cred['sname'],
                                                          cred['port'],
                                                          cred['user'],
                                                          cred['pass']))

        if not CONF.ignore_history:
            # Update the database and filter the already-open cases.
            history = HistoryDatabase()
            # history.open_database(CONF.database)
            history.open_database("/home/zoran/archive/history.csv")
            history.close_old_cases(vulnerable_hosts,
                                    scan_details['time'])
            history.open_new_cases(vulnerable_hosts,
                                   scan_details['time'],
                                   scan_id)
            history.close_database()

    report_scan(CONF.report_format,
                scan_details['time'],
                scan_id,
                invalid_host_count,
                vulnerable_hosts)

if __name__ == "__main__":

    CONF(sys.argv[1:], project='zoran')

    if CONF.report_format not in ("mixed", "text", "html"):
        print('Unknown report format: "%"' % CONF.report_format)
        exit

    nova_client = connect()
    if CONF.disable_host_validation:
        servers = []
    else:
        servers = list_servers(nova_client, ip=CONF.ip)
    run(CONF.input_file, servers)
