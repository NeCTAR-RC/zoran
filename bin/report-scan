#!/usr/bin/env python

from __future__ import print_function

import sys

from lxml import etree
import xmltodict

from zoran.nova import list_servers, connect
from zoran.metasploit import wash_host
from zoran.config import CONF, cfg

from zoran.vulnerable_hosts import VulnerableHost, Vulnerability, Credential
from zoran.vulnerable_hosts_report import report_scan

core_opts = [
    cfg.BoolOpt('disable-host-validation',
                help="""Don't validate hosts"""),
    cfg.BoolOpt('dump',
                help="""At the end of the report print all the
                        vulnerabilities and credentials in one huge
                        table"""),
    cfg.BoolOpt('ignore-history',
                help="""Don't bother to compare the security holes with
                        what's been tested before"""),
    cfg.StrOpt('input-file',
               help="""Result XML to process""",
               required=True),
    cfg.StrOpt('ip',
               help="""IP regex of servers"""),
    cfg.BoolOpt('list-boring',
                help="""List all vulnerabilities, even ones that would
                        normally be white listed"""),
    cfg.BoolOpt('report-empty',
                help="""Provide a report, even if there isn't any
                        vulnerability to report"""),
    cfg.StrOpt('report-format',
               help="""The format the report will be in: html, text
                       or mixed (the default). If the report is mixed
                       it will be emailed, if it is in html or text it
                       will just be printed to the screen.""",
               default="mixed"),
]

CONF.register_cli_opts(core_opts)


def host_service(host, service_id):
    service_id = host['uuid'] + '.' + service_id
    for service in host['services']:
        if service.get('id') == service_id:
            return service


def run(input_file, live_hosts):
    tree = etree.parse(input_file)

    # Filter report down to hosts only
    hosts = tree.find('hosts')

    # Convert nova hosts to dict
    live_hosts = dict((h.id, h) for h in live_hosts)

    # Extract the scan id
    scan_details = tree.find('generated').attrib
    scan_id = scan_details['project']

    invalid_host_count = 0

    vulnerable_hosts = []
    vulnerabilities = []
    credentials = []

    for host in hosts:
        host = xmltodict.parse(etree.tostring(host))
        host = wash_host(host['host'])
        host['scan-id'] = scan_id
        if host['uuid'] not in live_hosts and not CONF.disable_host_validation:
            invalid_host_count += 1
            continue

        # Create a new vulnerable host object. It doesn't matter that
        # this will be lost in the next iteration of the loop, as the
        # Class will keep track of it.
        vulnerable_host = VulnerableHost(host['uuid'], host['address'])
        vulnerable_hosts.append(vulnerable_host)

        for vulns in host['vulns']:
            if 'service-id' in vulns:
                service = host_service(host, vulns['service-id'])
                service_name = service['name']
                service_port = service['port']
            else:
                service_name = "None"
                service_port = "None"
            new_vuln = (Vulnerability(vulns['name'],
                        service_name,
                        service_port))
            vulnerabilities.append(new_vuln)
            vulnerable_host.add_vulnerability(new_vuln)

        for cred in host['creds']:
            new_cred = Credential(cred['sname'],
                                  cred['port'],
                                  cred['user'],
                                  cred['pass'])
            credentials.append(new_cred)
            vulnerable_host.add_credential(new_cred)

    if CONF.report_format not in ("mixed", "text", "html"):
        print('Unknown report format: "%"' % CONF.report_format)
        return

    report_scan(CONF.report_format,
                scan_details['time'],
                scan_id,
                invalid_host_count,
                vulnerable_hosts,
                vulnerabilities,
                credentials)

if __name__ == "__main__":
    CONF(sys.argv[1:], project='zoran')
    nova_client = connect()
    if CONF.disable_host_validation:
        servers = []
    else:
        servers = list_servers(nova_client, ip=CONF.ip)
    run(CONF.input_file, servers)
