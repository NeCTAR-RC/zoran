#!/usr/bin/env python

import argparse
from pprint import pprint
import sys

from lxml import etree
import xmltodict
from pymongo import MongoClient

from zoran.nova import list_servers, connect
from zoran.metasploit import wash_host
from zoran.config import CONF, cfg


core_opts = [
    cfg.StrOpt('input-file',
               help='Result XML to process',
               required=True),
    cfg.StrOpt('ip',
               help='IP regex of servers'),
]

CONF.register_cli_opts(core_opts)


def run(input_file, live_hosts, db_url):
    client = MongoClient(db_url)
    db = client.zoran
    host_scans = db.host_scans
    tree = etree.parse(input_file)

    # Filter report down to hosts only
    hosts = tree.find('hosts')

    # Convert nova hosts to dict
    live_hosts = dict((h.id, h) for h in live_hosts)

    # Extract the scan id
    scan_details = tree.find('generated').attrib
    scan_id = scan_details['project']

    vuln_hosts_count = 0
    invalid_hosts_count = 0
    for host in hosts:
        host = xmltodict.parse(etree.tostring(host))
        host = wash_host(host['host'])
        host['scan-id'] = scan_id
        if host['uuid'] not in live_hosts:
            invalid_hosts_count += 1
            continue

        # Insert or update database
        scan = {'uuid': host['uuid']}
        scan = host_scans.find_one(scan) or scan
        if not 'scans' in scan:
            scan['scans'] = []
        # TODO we should check if the scan has already been ingested.
        scan['scans'].append(host)
        host_scans.insert(scan)

        # Count vulnerabilities
        if host['vulns'] or host['creds']:
            vuln_hosts_count += 1

    print "Total Hosts:", len(hosts)
    print "Invalid Hosts:", invalid_hosts_count
    print "Vulnerable Hosts:", vuln_hosts_count

if __name__ == "__main__":
    CONF(sys.argv[1:], project='zoran')
    nova_client = connect()
    servers = list_servers(nova_client, ip=CONF.ip)

    run(CONF.input_file, servers, CONF.mongodb_connection)
